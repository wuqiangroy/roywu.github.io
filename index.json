[{"content":"Born in China, and I love my Country.\nHello, I wuqiangroy, a programmer write Golang and Python.\nThanks for you viewing my Blog, wish you everything\u0026rsquo;s fine.\nIf you have intresting of my content or some issues need to be discussed.\nPlease Contact Me\n","permalink":"http://wuqiangroy.github.io/about/","summary":"Born in China, and I love my Country.\nHello, I wuqiangroy, a programmer write Golang and Python.\nThanks for you viewing my Blog, wish you everything\u0026rsquo;s fine.\nIf you have intresting of my content or some issues need to be discussed.\nPlease Contact Me","title":"About"},{"content":"At this post, I have brief introduced how to test our gin APIs.\nAnd one test case tests one API, maybe this API including thousands functions, this kind of test we allways call Integration Test.\nThe Integration Test always care whether the API works well or not, it does\u0026rsquo;t care the codes coverage and whether a certain function works as expect or not.\nSo, we need to write Unit Test to ensure our program robust and keeps the issues number at a very low level.\nHow to write a unit test for go? It\u0026rsquo;s very easy for us to write a basic test case in go.\nWe can simply create a file which only subprefix is \u0026ldquo;_test.go.\u0026rdquo;, then command go test -v . to execute it.\nHere is an example:\nadd.go\n1 2 3 func Add(a, b int) (c int) { return a + b } And our test file:\nadd_test.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( \u0026#34;testing\u0026#34; \u0026#34;github.com/stretchr/testify/assert\u0026#34; ) func TestAdd(t *testing.T) { var assert = assert.New(t) type S = struct { A int B int C int } var data = []S{ {1, 2, 3}, {-1, -1, -2}, {0, -1, -1}, {999999999999, 1, 1000000000000}, } for _, v := range data { assert.Equal(v.C, Add(v.A, v.B)) } } When I ran go test -run ^TestAdd$ test, and I got:\n=== RUN TestAdd --- PASS: TestAdd (0.00s) PASS ok test 0.307s How to mock function when a function includes multiple calls? using gomonkey to mock common function OK, basic lesson is over, let\u0026rsquo;s do some a little more deep things.\nConsider a very common situation, we have a function named A. And in function A, it need to call function B, call function C, how should we test A? Like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main func B(a, b string) (result string, err error) { // some logic } func C(a, b string) (result string, err error) { // some logic } func A(a, b string) (score int, err error) { // process the parameters a and b -\u0026gt; a1, b1 result1, err = B(a1, b1) if err != nil { return 0, err } // process result -\u0026gt; a2, b2 result2, err = C(a2, b2) if err != nil { return 0, err } // process the result1 and result2 to got the score return score, nil } In the example above, I have a function A, in A, it will do some very complex logic to process the parameters a and b to get a score.\nI don\u0026rsquo;t want to care the function B and C due to I have writern unit cases for them and ensure them are run as my expect.\nWe can use a libaray gomonkey to mock the function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \u0026#34;testing\u0026#34; \u0026#34;github.com/agiledragon/gomonkey/v2\u0026#34; \u0026#34;github.com/stretchr/testify/assert\u0026#34; ) func TestA(t *testing.T) { assert := assert.New(t) var err error mockFunc1 := gomonkey.ApplyFunc(B, func(a, b string) (string, error) { return \u0026#34;\u0026#34;, nil }) mockFunc2 := gomonkey.ApplyFunc(C, func(a, b string) (string, error) { return \u0026#34;\u0026#34;, nil }) defer mockFunc1.Reset() defer mockFunc2.Reset() // mocke data then check output, err := A(a, b) assert.NoError(err) assert.Equal(expectData, output) } We can mock function B and C, and output the data what we want.\nAnd the calls in A will not call the real function B and C.\nusing gomonkey to mock function of a struct We can use gomonkey to mock the function of a struct, including public and private\npublic function Here is the example:\nappserver.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main type AppServer struct {} func(a *AppServer) A(a, b string) (result string, err error) { // do some logic -\u0026gt; a1, b1 tempResult, err = a.b(a1, b1) if err != nil { return } // process the tempResult // logic return result, nil } func (a *AppServer) b(a, b string) (result string, err error) { // do some logic } var appServer = AppServer{} AppServer has 2 functions: A and b, A is a public function, we can call this function from outer of AppServer, but b is a private function, only call it inner AppServer.\napiserver.go\n1 2 3 4 5 6 7 8 9 10 11 package main func Process(a, b string) (score int, err error) { // process a and b -\u0026gt; a1, b1 result, err = appServer.A(a1, b1) if err != nil { return } // process result -\u0026gt; score return score, nil } Function Process calls public function A of the struct AppServer, how we test Process by mocking function A:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import ( \u0026#34;reflect\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;github.com/agiledragon/gomonkey/v2\u0026#34; \u0026#34;github.com/stretchr/testify/assert\u0026#34; ) func TestProcess(t *testing.T) { var assert = assert.New(t) mockFunc := gomonkey.ApplyMethod(reflect.TypeOf(\u0026amp;appServer), \u0026#34;A\u0026#34;, func(_ *AppServer, a, b string) (result string, err error) { // mock result return result, nil }) defer mockFunc.Reset() // mock a, b output, err = Process(a, b) assert.NoError(err) assert.Equal(expect, output) } private function If we want to test the function A of AppServer, we can mock the private function b:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import ( \u0026#34;reflect\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;github.com/agiledragon/gomonkey/v2\u0026#34; \u0026#34;github.com/stretchr/testify/assert\u0026#34; ) var testAppServer = AppServer{} func TestProcess(t *testing.T) { var assert = assert.New(t) mockFunc := gomonkey.ApplyPrivateMethod(reflect.TypeOf(\u0026amp;testAppServer), \u0026#34;b\u0026#34;, func(_ *AppServer, a, b string) (result string, err error) { // mock result return result, nil }) defer mockFunc.Reset() // mock a, b output, err = testAppServer.A(a, b) assert.NoError(err) assert.Equal(expect, output) } How to simulate request parameters? And I will show the full unit test cases of a webserver bases on gin:\napiserver.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 package main import \u0026#34;github.com/gin-gonic/gin\u0026#34; type ApiServer struct{} func (a *ApiServer) Query(c *gin.Context) { var err error userName := c.Param(\u0026#34;userName\u0026#34;) var userInfo = UserInfo{} if userInfo, err = appServer.Query(userName); err != nil { c.JSON(404, []byte(`{\u0026#34;error\u0026#34;:\u0026#34;User not found\u0026#34;}`)) return } c.JSON(200, userInfo) return } func (a *ApiServer) Create(c *gin.Context) { var err error var userInfo UserInfo if err = c.ShouldBindJSON(\u0026amp;userInfo); err != nil { c.JSON(400, []byte(`{\u0026#34;error\u0026#34;:\u0026#34;Invalid request body\u0026#34;}`)) return } if err = appServer.Create(userInfo); err != nil { c.JSON(500, []byte(`{\u0026#34;error\u0026#34;:\u0026#34;Failed to create user\u0026#34;}`)) return } c.JSON(204, nil) return } func (a *ApiServer) QueryUserList(c *gin.Context) { var err error var req = struct { PageSize int `form:\u0026#34;pageSize\u0026#34; binding:\u0026#34;required\u0026#34;` Page int `form:\u0026#34;page\u0026#34; binding:\u0026#34;required\u0026#34; ` }{} if err = c.ShouldBind(\u0026amp;req); err != nil { c.JSON(400, []byte(`{\u0026#34;error\u0026#34;:\u0026#34;Invalid url value\u0026#34;}`)) return } var usersInfo []UserInfo if usersInfo, err = appServer.QueryList(req.Page, req.PageSize); err != nil { c.JSON(500, []byte(`{\u0026#34;error\u0026#34;:\u0026#34;Failed to query users\u0026#34;}`)) return } c.JSON(200, usersInfo) return } appserver.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main type UserInfo struct { ID string `json:\u0026#34;id\u0026#34;` Name string `json:\u0026#34;name\u0026#34; binding:\u0026#34;required\u0026#34;` Age int `json:\u0026#34;age\u0026#34; binding:\u0026#34;required\u0026#34;` Email string `json:\u0026#34;email\u0026#34; binding:\u0026#34;required\u0026#34;` } type AppServer struct{} func (a *AppServer) Query(userName string) (userInfo UserInfo, err error) { // do a database query operation return } func (a *AppServer) Create(userInfo UserInfo) (err error) { // do a database create operation return } func (a *AppServer) QueryList(page, size int) (usersInfo []UserInfo, err error) { // do a database query operation return } var appServer = AppServer{} We assume all the function of AppServer have been tested passed, which means we only need to write the unit test cases for ApiServer.\nWe need to create a universal request function to simulate a real request.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( \u0026#34;io\u0026#34; \u0026#34;net/url\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;net/http/httptest\u0026#34; ) func request(function func(c *gin.Context), reqBody []byte, urlParams []gin.Param, urlValues url.Values) (resBody []byte, statusCode int) { w := httptest.NewRecorder() c, _ := gin.CreateTestContext() c.Request = \u0026amp;http.Request{ Header: make(http.Header), URL: \u0026amp;url.URL{}, } // set reqBody c.Request.Body = io.NopCloser(bytes.Newbuffer(reqBody)) // set url value c.Request.URL.RawQuery = urlValues.Encode() // set urlParams for _, param := range urlParams { c.Params = append(c.Params, param) } function(c) body, _ := io.ReadAll(w.Body) return body, w.Code } We noticed that Gin.Context used c.Params = append(c.Params, param) to create the url parameters.\nurl parameters To simulate the url parameters, we can use urlParams := []gin.Param{{Key: \u0026quot;userName\u0026quot;, Value: \u0026quot;\u0026quot;}}. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func TestQuery(t *testing.T) { var assert = assert.New(t) mockFuncQuery := gomonkey.ApplyMethod(reflect.TypeOf(\u0026amp;appServer), \u0026#34;Query\u0026#34;, func(_ *AppServer, userName string) (userInfo UserInfo, err error) { if userName == \u0026#34;\u0026#34; { return UserInfo{}, errors.New(\u0026#34;not Found\u0026#34;) } return userInfo{Name: userName}, nil }) defer mockFuncQuery.Reset() var urlParams []gin.Param var body []byte var statusCode int // 404 urlParams = []gin.Param{{Key: \u0026#34;userName\u0026#34;, Value: \u0026#34;\u0026#34;}} body, statusCode = request(testApiServer.Query, nil, urlParams, nil) assert.Equal(404, statusCode) assert.Equal([]byte(`\u0026#34;error\u0026#34;:\u0026#34;User not found\u0026#34;`), body) // 200 urlParams = []gin.Param{{Key: \u0026#34;userName\u0026#34;, Value: \u0026#34;Jack\u0026#34;}} body, statusCode = request(testApiServer.Query, nil, urlParams, nil) assert.Equal(404, statusCode) output := UserInfo{} err := json.Unmarshal(body, \u0026amp;output) assert.NoError(err) assert.Equal(UserInfo{Name: \u0026#34;Jack\u0026#34;}, output) } request body The request body is always json string, so we only create a bytes data to simulate it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 func TestCreate(t *testing.T) { var assert = assert.New(t) var internalError bool mockFuncQuery := gomonkey.ApplyMethod(reflect.TypeOf(\u0026amp;appServer), \u0026#34;Create\u0026#34;, func(_ *AppServer, userInfo UserInfo) (err error) { if internalError { return errors.New(\u0026#34;internalError\u0026#34;) } return nil }) defer mockFuncQuery.Reset() var reqBody []byte var body []byte var statusCode int // 400 invalid req body, Name, age and email are must keys. // age type error reqBody = []byte(`{\u0026#34;name\u0026#34;:\u0026#34;Jack\u0026#34;,\u0026#34;Age\u0026#34;:\u0026#34;12\u0026#34;,\u0026#34;Email\u0026#34;:\u0026#34;jack@google.com\u0026#34;}`) body, statusCode = request(testApiServer.Create, reqBody, nil, nil) assert.Equal(400, statusCode) assert.Equal([]byte(`\u0026#34;error\u0026#34;:\u0026#34;Invalid request body\u0026#34;`), body) // no email field reqBody = []byte(`{\u0026#34;name\u0026#34;:\u0026#34;Jack\u0026#34;,\u0026#34;Age\u0026#34;:12}`) body, statusCode = request(testApiServer.Create, reqBody, nil, nil) assert.Equal(400, statusCode) assert.Equal([]byte(`\u0026#34;error\u0026#34;:\u0026#34;Invalid request body\u0026#34;`), body) // name is empty reqBody = []byte(`{\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;Age\u0026#34;:12,\u0026#34;Email\u0026#34;:\u0026#34;jack@google.com\u0026#34;}`) body, statusCode = request(testApiServer.Create, reqBody, nil, nil) assert.Equal(400, statusCode) assert.Equal([]byte(`\u0026#34;error\u0026#34;:\u0026#34;Invalid request body\u0026#34;`), body) // internalError internalError = true reqBody = []byte(`{\u0026#34;name\u0026#34;:\u0026#34;Jack\u0026#34;,\u0026#34;Age\u0026#34;:12,\u0026#34;Email\u0026#34;:\u0026#34;jack@google.com\u0026#34;}`) body, statusCode = request(testApiServer.Create, reqBody, nil, nil) assert.Equal(500, statusCode) assert.Equal([]byte(`\u0026#34;error\u0026#34;:\u0026#34;Failed to create user\u0026#34;`), body) // success -\u0026gt; 204 internalError = false reqBody = []byte(`{\u0026#34;name\u0026#34;:\u0026#34;Jack\u0026#34;,\u0026#34;Age\u0026#34;:12,\u0026#34;Email\u0026#34;:\u0026#34;jack@google.com\u0026#34;}`) _, statusCode = request(testApiServer.Create, reqBody, nil, nil) assert.Equal(204, statusCode) } url value Let\u0026rsquo;s simulate the url value, the format of url value should be like http://ip:port?page=1\u0026amp;pageSize=10, and the page and pageSize are url values. Here I can use url.Values, and the it provides function Add to add our url valus. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 func TestQueryUserList(t *testing.T) { var assert = assert.New(t) mockFuncQuery := gomonkey.ApplyMethod(reflect.TypeOf(\u0026amp;appServer), \u0026#34;QueryList\u0026#34;, func(_ *AppServer, page, size int) (usersInfo []UserInfo, err error) { if page \u0026lt; 0 || size \u0026lt; 0 { return nil, errors.New(\u0026#34;internalError\u0026#34;) } return []UserInfo{{Name: \u0026#34;Jack\u0026#34;}}, nil }) defer mockFuncQuery.Reset() var body []byte var statusCode int var urlValues = url.Values{} // no page and no pageSize body, statusCode = request(testApiServer.QueryUserList, nil, nil, urlValues) assert.Equal(400, statusCode) assert.Equal([]byte(`{\u0026#34;error\u0026#34;:\u0026#34;Invalid url value\u0026#34;}`), body) // page \u0026lt; 0 || pageSize \u0026lt; 0 -\u0026gt; internal error urlValues.Add(\u0026#34;page\u0026#34;, \u0026#34;-1\u0026#34;) urlValues.Add(\u0026#34;pageSize\u0026#34;, \u0026#34;-1\u0026#34;) body, statusCode = request(testApiServer.QueryUserList, nil, nil, urlValues) assert.Equal(500, statusCode) assert.Equal([]byte(`{\u0026#34;error\u0026#34;:\u0026#34;Failed to query users\u0026#34;}`), body) // normal urlValues.Add(\u0026#34;page\u0026#34;, \u0026#34;1\u0026#34;) urlValues.Add(\u0026#34;pageSize\u0026#34;, \u0026#34;10\u0026#34;) body, statusCode = request(testApiServer.QueryUserList, nil, nil, urlValues) assert.Equal(200, statusCode) var output []UserInfo err := json.Unmarshal(body, \u0026amp;output) assert.NoError(err) assert.ElementsMatch([]UserInfo{{Name: \u0026#34;Jack\u0026#34;}}, output) } ","permalink":"http://wuqiangroy.github.io/post/2023/the_unit_test_case_guideline_of_golang_gin/","summary":"At this post, I have brief introduced how to test our gin APIs.\nAnd one test case tests one API, maybe this API including thousands functions, this kind of test we allways call Integration Test.\nThe Integration Test always care whether the API works well or not, it does\u0026rsquo;t care the codes coverage and whether a certain function works as expect or not.\nSo, we need to write Unit Test to ensure our program robust and keeps the issues number at a very low level.","title":"The Unit Test Case Guideline Of Golang Gin"},{"content":"This new year was the coldest in Qingdao since I first went here in 2016. The coldest day is -16 degrees celsius, and I can only spend all the time inside the room. To my disappointment, I thought it would be snow stack and no. Before I left, the cold air left then sunlight made the ground warm, the highest weather was 8 degrees celsius, so I decided to leave the cozy room and travel to the well-known park in JiaoZhou: ShaoHai Park. Due to the cold days before, the lake was all iced. I tried to slide on the looked-thick ice, and security stopped me and said the lake icing the last night, the actually-thin ice could not afford my weight, and I would lose my life if I cracked the ice and jumped into the cold water. Thanking his alert and I kept walking. Red lamps were waving, and the color red symbolized good luck in the Chinese New year. When I walked to the island in the center of the lake, I saw a temple called: CiYun Temple. And 6 Chinese words carved on a stone(南普陀北慈云) which means Putuo In the South and CiYun in the North. The CiYun temple was built in 890 but was destroyed in the 1970s, and was rebuilt in 2009, and it\u0026rsquo;s a new building today. Walking on the lake bank, it\u0026rsquo;s the most leisure time. No winds, No clouds, and No noise. The sky was pure blue and sunlight made everything slower and slower, the time still slower and slower. Everyone here was enjoying the time. Passing a corner, I saw a beautiful house made of wood. It has a big and clean yard surrounded by the woods fences. All the doors and gates were locked, it seems no one lives there and it was just a sight. I love this house so much. The travel was over but I just traveling a part because of the time limit. This park is worth to travel and every sights was nice.\n","permalink":"http://wuqiangroy.github.io/post/2023/travel_to_shaohai_park_in_cny/","summary":"This new year was the coldest in Qingdao since I first went here in 2016. The coldest day is -16 degrees celsius, and I can only spend all the time inside the room. To my disappointment, I thought it would be snow stack and no. Before I left, the cold air left then sunlight made the ground warm, the highest weather was 8 degrees celsius, so I decided to leave the cozy room and travel to the well-known park in JiaoZhou: ShaoHai Park.","title":"Travel to ShaoHai Park in CNY"},{"content":"When we install Docker and run it, the remote access is disabled in the default configuration. Sometimes we need the remote access. Actually the Docker official provides how to enable it for us but it\u0026rsquo;s useless for me because I can not modify\u0026amp;save the docker.service file when I follow the tutorial. If you have interests, please see: Configure remote access for Docker daemon\nSo this is why I write this short post to record a solution to enable the remote access, in case I forget it in the future. PS. I still find the solution on the Internet.\nstep 1 We need to change the docker.service file on the /lib/systemd/system/: sudo vim /lib/systemd/system/docker.service Find the [Service] title and append -H=tcp://0.0.0.0:2375 in the ExecStart Save it, and the finnal file may like this:\ncat /lib/systemd/system/docker.service [Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network-online.target docker.socket firewalld.service containerd.service Wants=network-online.target Requires=docker.socket containerd.service [Service] Type=notify # the default is not to use systemd for cgroups because the delegate issues still # exists and systemd currently does not support the cgroup feature set required # for containers run by docker ExecStart=/usr/bin/dockerd -H fd:// -H=tcp://0.0.0.0:2375 --containerd=/run/containerd/containerd.sock ExecReload=/bin/kill -s HUP $MAINPID TimeoutSec=0 RestartSec=2 Restart=always # Note that StartLimit* options were moved from \u0026#34;Service\u0026#34; to \u0026#34;Unit\u0026#34; in systemd 229. # Both the old, and new location are accepted by systemd 229 and up, so using the old location # to make them work for either version of systemd. StartLimitBurst=3 # Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230. # Both the old, and new name are accepted by systemd 230 and up, so using the old name to make # this option work for either version of systemd. StartLimitInterval=60s # Having non-zero Limit*s causes performance problems due to accounting overhead # in the kernel. We recommend using cgroups to do container-local accounting. LimitNOFILE=infinity LimitNPROC=infinity LimitCORE=infinity # Comment TasksMax if your systemd version does not support it. # Only systemd 226 and above support this option. TasksMax=infinity # set delegate yes so that systemd does not reset the cgroups of docker containers Delegate=yes # kill only the docker process, not all processes in the cgroup KillMode=process OOMScoreAdjust=-500 [Install] WantedBy=multi-user.target step 2 Then we need to reboot the Docker server: sudo systemctl daemon-reload sudo service docker restart\nstep 3 Checking the remote access by following commands: sudo netstat -lntp | grep dockerd to check the ip and port whether enabled on the server. Or: On client, use curl http://{{server_ip}}:2375/images/json, the result may like this(including all the images you have pulled before.):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [ { \u0026#34;Containers\u0026#34;:-1, \u0026#34;Created\u0026#34;:1632440877, \u0026#34;Id\u0026#34;:\u0026#34;sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412\u0026#34;, \u0026#34;Labels\u0026#34;:null, \u0026#34;ParentId\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;RepoDigests\u0026#34;:[ \u0026#34;hello-world@sha256:aa0cc8055b82dc2509bed2e19b275c8f463506616377219d9642221ab53cf9fe\u0026#34; ], \u0026#34;RepoTags\u0026#34;:[ \u0026#34;hello-world:latest\u0026#34; ], \u0026#34;SharedSize\u0026#34;:-1, \u0026#34;Size\u0026#34;:13256, \u0026#34;VirtualSize\u0026#34;:13256 } ] ","permalink":"http://wuqiangroy.github.io/post/2023/how_to_enable_remote_access_for_docker/","summary":"When we install Docker and run it, the remote access is disabled in the default configuration. Sometimes we need the remote access. Actually the Docker official provides how to enable it for us but it\u0026rsquo;s useless for me because I can not modify\u0026amp;save the docker.service file when I follow the tutorial. If you have interests, please see: Configure remote access for Docker daemon\nSo this is why I write this short post to record a solution to enable the remote access, in case I forget it in the future.","title":"How to enable remote access for Docker"},{"content":"As the pre-post said, Gin is a famouse web framework writen by Go. I love it and always use it. When I wrote a web server using Go-Gin, how do I test the APIs? This may confused me, only use a command-line tool to verify them? It\u0026rsquo;s seems ridiculous and non-product. We need to have a full-check for the APIs and it\u0026rsquo;s better to make it automatic, then we need to integrate it in the CI-CD pipline, make sure that it will run automaticly after we commit codes.\nwrite a Go-Gin service It\u0026rsquo;s very easy to write a web server using Go-Gin, here\u0026rsquo;s an example of exporting the information of an user. The very first step, we need to create a workplace named webserver. The architechture is:\n1 2 3 4 5 6 webserver -- module -- user.go -- main.go -- go.sum -- go.mod The logic codes are under a module file: module/user.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package module import ( \u0026#34;net/http\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; ) type UserInfo struct { Nickname string `json: \u0026#34;nickname\u0026#34;` UserID string `json:\u0026#34;userID\u0026#34;` // unique for all users Gender int `json:\u0026#34;gender\u0026#34;` // 0 - male 1 - female BirthDay string `json:\u0026#34;birthday\u0026#34;` } func GetUser(c *gin.Context) { name := c.Request.FormValue(\u0026#34;name\u0026#34;) if name == \u0026#34;Joe\u0026#34; { var user = UserInfo{ Nickname: \u0026#34;Joe\u0026#34;, UserID: \u0026#34;113113\u0026#34;, Gender: 0, BirthDay: \u0026#34;1990-01-01\u0026#34;, } c.IndentedJSON(http.StatusOK, user) return } c.IndentedJSON(http.StatusBadRequest, nil) return } main.go is our start process, here we register all the routers. main.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \u0026#34;webserver/module\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; ) func main() { r := gin.Default() r.GET(\u0026#34;/user\u0026#34;, module.GetUser) r.Run() } We set a form value of name here, if only the name equals Joe, the info of Joe will be sent out, but other name will get the HTTP status 400. Then run go run main.go to start the webserver.\ntest the APIs using postman Postman is a well-known GUI API test tool, easy and elegant to use, ofcourse, here you can use other GUI tools you like, suck as RapidApi and Apifox.\nWhen I set the name Joe, I\u0026rsquo;ll get the info of Joe: But others will only get BadRequest: You can use your own tool to test it.\nwrite an unit-test for the APIs We\u0026rsquo;ve already test out API by using postman, it seems OK now. But it\u0026rsquo;s only a very good tool for programmer, although it clear and easy to use, help us fix bug and check the API realtime. Somtimes, we change a universal function, it\u0026rsquo;s may effect to all the apis, although we sure the function is 100 percent OK and have beed tested full, but we still need to query all the APIs manually in the GUI software Postman. When you have 1000 APIs, you may crazy. Actually, Postman provides us a test tool and mock data now, you can test all your APIs by one click, but if a lazy boy changed the universal function, just testing it but forget to run the test? This may case a bad issue. We still need to write test code for it, we need to write the test code and integrate in Git pipeline, only the pipeline passed, your code will be commit successfully. Now, Gin provides a good function to call APIs directly. Create a new file: test/api_test.go Now, your architechture may like this:\n1 2 3 4 5 6 7 8 webserver -- module -- user.go -- test -- api_test.go main.go go.sum go.mod module/user.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;net/http/httptest\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;webserver/module\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/stretchr/testify/assert\u0026#34; ) func TestGetUser(t *testing.T) { var url = \u0026#34;/user\u0026#34; r := gin.Default() r.GET(url, module.GetUser) w := httptest.NewRecorder() req, _ := http.NewRequest(http.MethodGet, \u0026#34;/user\u0026#34;, nil) r.ServeHTTP(w, req) assert.Equal(t, http.StatusBadRequest, w.Code) var name = \u0026#34;Joe\u0026#34; req2, _ := http.NewRequest(http.MethodGet, \u0026#34;/user?name=\u0026#34;+name, nil) w = httptest.NewRecorder() r.ServeHTTP(w, req2) var data map[string]string fmt.Println(w.Code) json.Unmarshal(w.Body.Bytes(), \u0026amp;data) fmt.Println(data) assert.Equal(t, http.StatusOK, w.Code) assert.Equal(t, data[\u0026#34;Nickname\u0026#34;], name) } We have 2 data checker here, one is checking the BadRequest and another is checking normal request. We can use go test -v test/* test all the test files under the test file. Result:\n$ go test -v test/* === RUN TestGetUser [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] [WARNING] Running in \u0026#34;debug\u0026#34; mode. Switch to \u0026#34;release\u0026#34; mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] GET /user --\u0026gt; webserver/module.GetUser (3 handlers) [GIN] 2023/01/03 - 16:54:25 | 400 | 203.5µs | | GET \u0026#34;/user\u0026#34; [GIN] 2023/01/03 - 16:54:25 | 200 | 31.084µs | | GET \u0026#34;/user?name=Joe\u0026#34; 200 map[Nickname:Joe birthday:1990-01-01 gender: userID:113113] --- PASS: TestGetUser (0.00s) PASS ok command-line-arguments 0.584s Let me modify the name Joe to Jo, this time, the test should be failed.\n$ go test -v test/* === RUN TestGetUser [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] [WARNING] Running in \u0026#34;debug\u0026#34; mode. Switch to \u0026#34;release\u0026#34; mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] GET /user --\u0026gt; webserver/module.GetUser (3 handlers) [GIN] 2023/01/03 - 16:57:23 | 400 | 139.666µs | | GET \u0026#34;/user\u0026#34; [GIN] 2023/01/03 - 16:57:23 | 400 | 2.459µs | | GET \u0026#34;/user?name=Jo\u0026#34; 400 map[] api_test.go:33: Error Trace: /webserver/test/api_test.go:33 Error: Not equal: expected: 200 actual : 400 Test: TestGetUser api_test.go:34: Error Trace: /webserver/test/api_test.go:34 Error: Not equal: expected: \u0026#34;\u0026#34; actual : \u0026#34;Jo\u0026#34; Diff: --- Expected +++ Actual @@ -1 +1 @@ - +Jo Test: TestGetUser --- FAIL: TestGetUser (0.00s) FAIL FAIL command-line-arguments 0.469s FAIL That means when we modified the universal code, the pipeline of test may fail and our codes need to be check.\nCI-CD Above, our test command is go test -v test/*. So, when we need CI-CD, we only need to add this command to your .gitlab-ci.yaml file, maybe you can add a new stage named test. If you are the first time hearing .gitlab-ci.yaml, here\u0026rsquo;s a reference for you: The .gitlab-ci.yml file ","permalink":"http://wuqiangroy.github.io/post/2023/how_to_test_the_apis_of_your_go_gin_service/","summary":"As the pre-post said, Gin is a famouse web framework writen by Go. I love it and always use it. When I wrote a web server using Go-Gin, how do I test the APIs? This may confused me, only use a command-line tool to verify them? It\u0026rsquo;s seems ridiculous and non-product. We need to have a full-check for the APIs and it\u0026rsquo;s better to make it automatic, then we need to integrate it in the CI-CD pipline, make sure that it will run automaticly after we commit codes.","title":"How to test the APIs of your Go-Gin service?"},{"content":"When we create an aswsome project written by Go, we always want to provide it for others. Some good projects like gorilla websocket, gorm and gin, we can easily to run go get github.com/xxx to get the Go module and then use it in our projects. So, how can we build our own Go project as a Go module?\nGithub In the platform of Github, you may want to build your projects for all the users so they can use your project directly. The first step for you is create a repo(here, I create a repo named add): And then, pull this project to your PC by git(if you feel some difficult using Git, you best follow the official guide). Now, you can write your codes here, the architechture of your project may best follow this:\ntest - test.go src - source.go main.go go.sum go.mod Remenber, src/source.go just an example, you can modify it if you like. Your main functions should be existed in main.go(you still can change the name if you like.) so that users can call your functions. Here\u0026rsquo;s my example of function Add(just an example, pls igore too simple of it.)\nadd.go go.mod add.go\n1 2 3 4 5 package goModule func Add(a, b int) int { return a + b } When you finish your codes, you can pull it to gihub. We are already finishing our work, and the next step is create a tag and a release version. Note: In github, you should create tag first then you can create a release version. After you create the release version, then you can go get github.com/wuqiangroy/add to get the latest version of your project, and you can go get github.com/wuqiangroy/add@{version_id} to get the specific version. Now, your work\u0026rsquo;s done. You can try you Go module in your new project. You can use it as other open-source projects:\n1 2 3 4 5 6 7 8 9 10 import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/wuqiangroy/add\u0026#34; ) func main() { var a, b = 1, 2 var c = add.Add(a, b) fmt.Println(c) } Company In company, there are so much different, due to the security and comercial consideration, the company DO NOT want others get the codes, expecially the competitors. After all, a stuff still not easy to get the code from code lib of the company by web page.The company may enable two-factories verification, and the web protocol of go get is HTTP, we want to use git to replace it HTTP. The most companies around the world may use Gitlab to build it as own git service, so as your company. The first step is to generate the access token. And the official has a very full guide of how to generate an revoke the access token, you can follow it. Note:Remenber your access token when it display, it only display once and disappear when you refresh the webpage.\nAnd next edit your local git file vim ~/.gitconfig:\n[http] extraheader = PRIVATE-TOKEN:{your access token} sslVerify = false [url `ssh://git@{the git url of your company}`] insteadOf = `https://{the git url of your company}` save it and try to go get the module in your company lib.\nNOTE: For both above, you should enable the go moduel: go env -w GO111MODULE=on If you use go proxy, you may add it to env: go env -w GOPRIVATE={the git url of your company}\n","permalink":"http://wuqiangroy.github.io/post/2023/how_to_set_a_go_project_as_a_module/","summary":"When we create an aswsome project written by Go, we always want to provide it for others. Some good projects like gorilla websocket, gorm and gin, we can easily to run go get github.com/xxx to get the Go module and then use it in our projects. So, how can we build our own Go project as a Go module?\nGithub In the platform of Github, you may want to build your projects for all the users so they can use your project directly.","title":"How to set a Go project as a Go module?"},{"content":"Introduction Gin is a famous web framework written in Go, we can easy to build our web server by following codes:\n1 2 3 4 5 6 7 8 9 10 11 12 package main import \u0026#34;github.com/gin-gonic/gin\u0026#34; func main() { r := gin.Default() r.GET(\u0026#34;/hello-world\u0026#34;, func(c *gin.Context) { c.JSON(200, gin.H{ \u0026#34;message\u0026#34;: \u0026#34;hello, world\u0026#34;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 } Saving these 11 lines codes as a hello.go file, then run go run hello.go. Now, we can input curl statement in command line tool: curl http://127.0.0.1:8080/hello-world And we can get:\n1 2 3 { \u0026#34;message\u0026#34;: \u0026#34;hello, world\u0026#34; } Now, our web server is already finished. Using websocket in Gin There are not so many websocket liberaies for Golang, and gorilla websocket is most important one. We can easy to write our own websocket server:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( \u0026#34;log\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/gorilla/websocket\u0026#34; ) func Websocket(c *gin.Context) { var upgrader = websocket.Upgrader{} w, err := upgrader.Upgrade(c.Writer, c.Request, nil) if err != nil { log.Print(\u0026#34;upgrade:\u0026#34;, err) return } defer w.Close() for { mt, message, err := w.ReadMessage() if err != nil { log.Println(\u0026#34;read:\u0026#34;, err) break } log.Printf(\u0026#34;recv: %s\u0026#34;, message) err = w.WriteMessage(mt, message) if err != nil { log.Println(\u0026#34;write:\u0026#34;, err) break } } } func main() { r := gin.Default() r.GET(\u0026#34;/hello-world\u0026#34;, Websocket) r.Run() // listen and serve on 0.0.0.0:8080 } We create a new function named Websocket, this is the main logic code to deal all the websocket data stream. And you still can see a forever loop here to read the msg from client and then send the same msg to client. Let\u0026rsquo;s run and test the code: go run hello.go Now, we can test the websocket in Postman: The pic shows that the msgs send and receive both are the same.\nUpgrade the websocket module Why we need to upgrade the websocket module? As the code shows above, we can easy and short lines codes to build the websocket server, but why the websocket module needs a upgrade?\n1 2 3 4 5 6 7 var upgrader = websocket.Upgrader{} w, err := upgrader.Upgrade(c.Writer, c.Request, nil) if err != nil { log.Print(\u0026#34;upgrade:\u0026#34;, err) return } defer w.Close() As you can see, we need to initial websocket every time when websocket establishes, and munually call the websocket close when websocket disconnects.\nAnd even for the ReadMessage and WriteMsg, we may only care about he message but not others, we can use the Pool to upgrade, that\u0026rsquo;s why I import go-channel here.\nutils.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 package utils import ( \u0026#34;errors\u0026#34; \u0026#34;github.com/gorilla/websocket\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;sync\u0026#34; ) type WebsocketConnection struct { wsconnect *websocket.Conn inChan chan []byte outChan chan []byte closeChan chan byte sync.Mutex IsClosed bool } func InitWebsocket(c *gin.Context) (wc *WebsocketConnection, err error) { var wsupgrader = websocket.Upgrader{ ReadBufferSize: 1024, WriteBufferSize: 1024, CheckOrigin: func(r *http.Request) bool { return true }, } var conn *websocket.Conn if conn, err = wsupgrader.Upgrade(c.Writer, c.Request, nil); err != nil { return } wc = \u0026amp;WebsocketConnection{ wsconnect: conn, inChan: make(chan []byte, 0), outChan: make(chan []byte, 0), closeChan: make(chan byte, 1), } go wc.readLoop() go wc.writeLoop() return } func (wc *WebsocketConnection) ReadMessage() (data []byte, err error) { select { case data = \u0026lt;-wc.inChan: case \u0026lt;-wc.closeChan: err = errors.New(\u0026#34;Websocket disconnected.\u0026#34;) } return } func (wc *WebsocketConnection) WriteMessage(data []byte) (err error) { select { case wc.outChan \u0026lt;- data: case \u0026lt;-wc.closeChan: err = errors.New(\u0026#34;Websocket disconnected.\u0026#34;) } return } func (wc *WebsocketConnection) Close() { wc.wsconnect.Close() wc.Mutex.Lock() defer wc.Mutex.Unlock() if !wc.IsClosed { close(wc.closeChan) wc.IsClosed = true } } func (wc *WebsocketConnection) readLoop() { var data []byte var err error for { if _, data, err = wc.wsconnect.ReadMessage(); err != nil { wc.Close() break } select { case wc.inChan \u0026lt;- data: fmt.Println(\u0026#34;Receive data from client: \u0026#34; + string(data)) case \u0026lt;-wc.closeChan: wc.Close() break } } return } func (wc *WebsocketConnection) writeLoop() { var data []byte var err error for { select { case data = \u0026lt;-wc.outChan: case \u0026lt;-wc.closeChan: wc.Close() break } if err = wc.wsconnect.WriteMessage(websocket.TextMessage, data); err != nil { wc.Close() break } } return } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( \u0026#34;utils\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/gorilla/websocket\u0026#34; ) func Websocket(c *gin.Context) { var wc *WebsocketConnection var err error if wc, err = utils.InitWebsocket(c); err != nil { fmt.Printf(\u0026#34;Websocket connection initial failed. err: %s\\n\u0026#34;, err.Error()) return } for { if msg, err = wc.ReadMessage(); err != nil { fmt.Println(\u0026#34;Read message of client by websocket failed.\\n\u0026#34;) break } fmt.Println(\u0026#34;Read message of client:\u0026#34; + string(msg)) wc.WriteMessage(msg) } } func main() { r := gin.Default() r.Any(\u0026#34;/hello-world\u0026#34;, Websocket) r.Run() } Now, we use go-channel to cache the input and sender msg, the websocket module now supports million-class concurrency, and much more easy to use.\n","permalink":"http://wuqiangroy.github.io/post/2022/integrate_websocket_to_gin/","summary":"Introduction Gin is a famous web framework written in Go, we can easy to build our web server by following codes:\n1 2 3 4 5 6 7 8 9 10 11 12 package main import \u0026#34;github.com/gin-gonic/gin\u0026#34; func main() { r := gin.Default() r.GET(\u0026#34;/hello-world\u0026#34;, func(c *gin.Context) { c.JSON(200, gin.H{ \u0026#34;message\u0026#34;: \u0026#34;hello, world\u0026#34;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 } Saving these 11 lines codes as a hello.go file, then run go run hello.","title":"Integrate websocket to gin"},{"content":"上周六（12-10）一早起床，我发现我的嗓子有点干痒，妻直接是感冒症状了，据她说是前一天穿衣午睡，然后起床没加衣服导致的。 晚上的时候，妻病情加重，开始发烧，我这边还好，怕波及小孩子，我妈赶紧过来将小孩接走。 当晚，妻多次发烧，难以入睡，喝了布洛芬悬浊液之后勉强入睡。 我这边一切正常。\n12-11 周日 周日一起床，我发现我这边比较严重了，开始头晕，但是这时候晕的不是特别厉害，只是很轻微。 下午完了一会原神，但是玩不进去，于是我选择上床躺着休息。 躺着的时候还是很舒服的，但是一起床，头晕目眩的感觉很难受，特别是眼睛胀痛，在往上看的时候尤其严重。 四肢酸软。 其实这个时候我都还在纠结我是不是得了新冠，也不愿去做检测（检测排队太久了）。我感觉我可能是感冒。 于是我决定做点家务，再把地拖了之后，又烧了点艾草水泡澡。 泡完澡半小时之后，我出现了发热，最高到了 39.1 度。 这时候我精神还很好，但是已经开始出现了不想动的情况，妻赶紧给我喝布洛芬悬浊液，效果很好，几分钟就感觉体温降了下去，然后一切均恢复正常。 也许是发烧的时候人体感知时间不久，我当时感觉发烧持续了半小时左右。\n12-12 周一 今日起床，无任何发烧情况了，但是头晕目涨的情况依旧。 四肢酸软的情况消失。 晚上躺在沙发上看县委大院和三体，这时候感觉和正常人无异，但是一起身，头晕的感觉就会袭来，这种头晕的感觉和人下蹲久了突然起身导致的头晕感觉一致。 今天开始出现鼻塞的现象，但是擤不出鼻涕。 晚上入睡轻松，侧躺鼻塞现象消失，夜里浑身出汗多次。\n12-13 周二 今日起床，头晕目涨感觉轻微。嗓子出现干痒，白天少咳。 晚上咳嗽多次，多是干咳，咳嗽引起嗓子疼痛。 鼻塞较前一天加重，能擤出少量鼻涕，但是对鼻塞没有缓解作用，侧躺鼻塞不能完全消失，能减轻症状。 入睡轻松。\n12-14 周三 今天头晕目涨的感觉全部消失，咳嗽减轻，每咳必出脓痰。嗓子疼痛感较前一天减弱很多。 味觉出现减弱现象，不知道是不是因为鼻塞的原因。 鼻塞减弱，有鼻涕流出，和平时感冒症状一致。\n根据网上流传的奥密克戎症状图来看，我应该就是阳性了。 而且我感觉，新冠比感冒来的更猛更迅速。 我也不禁感叹，国家保护了我三年，我屁事没有，现在自己保护自己，才几天，就阳了。\n我爸、我妈同时感觉嗓子痒，大抵也阳了。 我们趁着病情好转，将小孩接了回来。\n","permalink":"http://wuqiangroy.github.io/post/2022/i_may_positive_for_covid-19/","summary":"上周六（12-10）一早起床，我发现我的嗓子有点干痒，妻直接是感冒症状了，据她说是前一天穿衣午睡，然后起床没加衣服导致的。 晚上的时候，妻病情加重，开始发烧，我这边还好，怕波及小孩子，我妈赶紧过来将小孩接走。 当晚，妻多次发烧，难以入睡，喝了布洛芬悬浊液之后勉强入睡。 我这边一切正常。\n12-11 周日 周日一起床，我发现我这边比较严重了，开始头晕，但是这时候晕的不是特别厉害，只是很轻微。 下午完了一会原神，但是玩不进去，于是我选择上床躺着休息。 躺着的时候还是很舒服的，但是一起床，头晕目眩的感觉很难受，特别是眼睛胀痛，在往上看的时候尤其严重。 四肢酸软。 其实这个时候我都还在纠结我是不是得了新冠，也不愿去做检测（检测排队太久了）。我感觉我可能是感冒。 于是我决定做点家务，再把地拖了之后，又烧了点艾草水泡澡。 泡完澡半小时之后，我出现了发热，最高到了 39.1 度。 这时候我精神还很好，但是已经开始出现了不想动的情况，妻赶紧给我喝布洛芬悬浊液，效果很好，几分钟就感觉体温降了下去，然后一切均恢复正常。 也许是发烧的时候人体感知时间不久，我当时感觉发烧持续了半小时左右。\n12-12 周一 今日起床，无任何发烧情况了，但是头晕目涨的情况依旧。 四肢酸软的情况消失。 晚上躺在沙发上看县委大院和三体，这时候感觉和正常人无异，但是一起身，头晕的感觉就会袭来，这种头晕的感觉和人下蹲久了突然起身导致的头晕感觉一致。 今天开始出现鼻塞的现象，但是擤不出鼻涕。 晚上入睡轻松，侧躺鼻塞现象消失，夜里浑身出汗多次。\n12-13 周二 今日起床，头晕目涨感觉轻微。嗓子出现干痒，白天少咳。 晚上咳嗽多次，多是干咳，咳嗽引起嗓子疼痛。 鼻塞较前一天加重，能擤出少量鼻涕，但是对鼻塞没有缓解作用，侧躺鼻塞不能完全消失，能减轻症状。 入睡轻松。\n12-14 周三 今天头晕目涨的感觉全部消失，咳嗽减轻，每咳必出脓痰。嗓子疼痛感较前一天减弱很多。 味觉出现减弱现象，不知道是不是因为鼻塞的原因。 鼻塞减弱，有鼻涕流出，和平时感冒症状一致。\n根据网上流传的奥密克戎症状图来看，我应该就是阳性了。 而且我感觉，新冠比感冒来的更猛更迅速。 我也不禁感叹，国家保护了我三年，我屁事没有，现在自己保护自己，才几天，就阳了。\n我爸、我妈同时感觉嗓子痒，大抵也阳了。 我们趁着病情好转，将小孩接了回来。","title":"我大抵是阳了"},{"content":" ","permalink":"http://wuqiangroy.github.io/post/2022/mourn_for_chairman_jiang/","summary":" ","title":"十里长街送长者！"},{"content":"他改变了中国！ “苟利国家生死以，岂因祸福避趋之。”\n“军队一律不得经商。”\n“我们党要始终代表中国先进生产力的发展方向，我们党要始终代表中国先进文化的前进方向，我们党要始终代表中国最广大人民的根本利益。”\n“不要听风就是雨。”\n“要始终提高知识水平。”\n“Too young too simple, sometimes naive”\n长者永垂不朽。\n告全党全军全国各族人民书\n","permalink":"http://wuqiangroy.github.io/post/2022/remember_chairman_jiang_forever/","summary":"他改变了中国！ “苟利国家生死以，岂因祸福避趋之。”\n“军队一律不得经商。”\n“我们党要始终代表中国先进生产力的发展方向，我们党要始终代表中国先进文化的前进方向，我们党要始终代表中国最广大人民的根本利益。”\n“不要听风就是雨。”\n“要始终提高知识水平。”\n“Too young too simple, sometimes naive”\n长者永垂不朽。\n告全党全军全国各族人民书","title":"长者永垂不朽！"},{"content":"之前在字节面试的时候，面试官给我出了一道算法题：给定一个用字符串表示的算式，算式中只有+， -， *， /，请计算出最终结果。 比如 2+3*4-2/2。 很明显，如果没有 * 和 / ，那我们直接一个循环处理即可，但是有了 * 和 /，算式就有了优先级，我们需要先计算优先级高的，在计算优先级低的。 面试官提醒我可以使用栈来处理，我才恍然大悟，然后迅速用代码实现。 面试结束后，我就去细了解了一下这类问题的做法，这种字符串公式的表达叫做：中缀表达式，与之类似的还有前缀表达式和后缀表达式，前缀表达式和后缀表达式又被叫做波兰表达式和逆波兰表达式。\n中缀表达式 其实很多读者在数据结构这一门课上，就已经学过中缀表达式了，但是对于我这个非科班的来说，第一次接触还是非常新鲜的，对于学过的朋友权当复习了。 使用栈这种数据结构，可以很好的处理仅有加减乘除四种运算符（不含括号）的公式。 栈是一种先入后出（FILO）的数据结构，可以将数据入栈和出栈，入栈数据会在栈顶，出栈是将栈顶的数据取出。 对 2+3*4-2/2 表达式来说，我们将数字压入栈，如果遇到 * 和 / 这两个优先级高的操作，我们将栈中的数据出栈，和操作符后面的数据进行 * 和 / 操作之后，将结果入栈，遇到 + 则不做操作，遇到 - 则对后一个数据进行取负，将数据压入栈即可。\n就对 2+3*4-2/2 举例子：\n1 2 3 4 5 6 7 8 9 10 轮询到第一个数字 2 压入栈中，当前栈 [2] 操作符 +， 抛弃 数字 3 压入栈，当前栈：[2, 3] 操作符 *,将栈顶取出一个值 3，当前栈 [2] 将下一个数字 4 和刚刚取出的值 3 做 * 操作得到 12，压入栈，目前栈：[2, 12] 操作符 -, 对下一个数取负 数字 2，取负后压入栈，目前栈 [2, 12, -2] 操作符 /, 取出栈顶值 -2,目前栈 [2, 12] 将下一个数字 2 和刚刚取出的值 -2 做 / 操作得到 1,压入栈，目前栈 [2, 12, -1] 最后对栈里的数据进行相加，得到 2+12-1 = 13 13 即是最终值。 因为 golang 中没有现成的栈 api，我们需要用队列来手动实现一个。 实现代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 type Stack struct { Data []int } func (s *Stack) isEmpty() bool { if len(s.Data) == 0 { return true } return false } func (s *Stack) push(num int) { s.Data = append(s.Data, num) } func (s *Stack) pop() int { num := s.Data[len(s.Data)-1] s.Data = s.Data[:len(s.Data)-1] return num } func (s *Stack) top() int { return s.Data[len(s.Data)-1] } func getStack() *Stack { return \u0026amp;Stack{} } 栈的基本功能已经实现，有：\npush 方法，在栈顶压入数据 pop 方法，从栈顶删除一个数据，并返回该数据 top 方法，去栈顶的数据返回，不删除栈顶数据 isEmpty 方法，判断栈是否为空 下面我们来实现计算中缀表达式的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 func calculator(s string) int { var stack = getStack() num := 0 var op byte = \u0026#39;+\u0026#39; for i := 0; i \u0026lt; len(s); i++ { isDigit := s[i] \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; s[i] \u0026lt;= \u0026#39;9\u0026#39; if isDigit { num = 10*num + int(s[i]-\u0026#39;0\u0026#39;) } // 需要处理轮询到最后一位的数据，最后一位的数据肯定是数字 if !isDigit || i == len(s)-1 { switch op { case \u0026#39;+\u0026#39;: stack.push(num) case \u0026#39;-\u0026#39;: stack.push(-num) case \u0026#39;*\u0026#39;: stack.push(stack.pop() * num) default: stack.push(stack.pop() / num) } op = s[i] num = 0 } } var ans = 0 for _, num := range stack.Data { ans += num } return ans } 逆波兰表达式（后缀表达式） 对中缀表达式来说，如果不涉及 （） 这种计算，那么用上面的代码即可处理，但是一旦涉及了 （），计算就会非常复杂。 波兰的一位逻辑学家卢卡西维兹在 1929 年提出了一种计算表达式的表达方法： 将操作符放到操作数之前（中缀表达式是将操作符放到操作数中间）。 由于操作符在操作数之前，于是这种表达式被叫做前缀表达式，因为发明者是波兰人，这种表达式又被叫做波兰表达式。 很明显，逆波兰表达式就是操作符在操作数之后的。 举个例子：\n中缀表达式为：2+3*2-2 波兰表达式为：[-, +, 2, *, 3, 2, 2] 逆波兰表达式为：[2, 3, 2, *, +, 2, -] 我们来看看如何计算逆波兰表达式。 根据逆波兰表达式的特点，操作符是表示前两个数的操作的，比如 [3, 2, *],代表的就是 3 * 2。 那么我们在对表达式轮询的时候，如果是操作数，就压入栈中，如果是操作符，那么就把栈顶的两个数据取出，进行操作之后，压入栈中。 轮询完之后，栈顶的数据就是我们需要的值。 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func reversePolishNotation(notation []string) int { var stack = getStack() for _, v := range notation { num, err := strconv.Atoi(v) if err == nil { stack.push(num) } else { num1, num2 := stack.pop(), stack.pop() switch v { case \u0026#34;+\u0026#34;: stack.push(num2 + num1) case \u0026#34;-\u0026#34;: stack.push(num2 - num1) case \u0026#34;/\u0026#34;: stack.push(num2 / num1) default: stack.push(num2 * num1) } } } return stack.top() } 中缀表达式转逆波兰表达式 我们通过各种表达式的表达中可以发现： 中缀表达式为：2+3*2-2 逆波兰表达式为：[2, 3, 2, *, +, 2, -] 操作数的顺序是没有变化的，都是 2、3、2、2 只有操作符的顺序发生了改变，那么我们在中缀表达式转逆波兰表达式中，维护一个操作符的栈，一个操作数的栈，然后将操作符插入操作数的栈中即可。 以下是具体的操作步骤：\n遇到操作数，将操作数压入操作数栈中 遇到操作符，在操作符栈中找平级或更高级的操作符，依次将这些操作符压入操作数栈，将本身轮询到的操作符压入栈中 遇到界限符 ()，如果是 ( 直接压入操作符栈中，遇到 )，就在操作符中往前查找，直到找到 (，将中间遇到的所有操作符都加到操作数栈中，然后将 ( 删除 中缀表达式轮询完毕，将操作符栈里面的所有数据都加到操作数中。 操作数栈数据即为逆波兰表达式 我们来模拟一次：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 中缀表达式：2+3-(2+4*2)+2/2 操作数栈：[] 操作符栈: [] 轮询 1：2 是操作数，直接压入操作数栈。操作数栈：[2] 操作符栈: [] 轮询 2: + 是操作符，此时操作符栈为空，没有平级或更高级的操作符，直接将 + 压入操作符栈。操作数栈：[2] 操作符栈: [+] 轮询 3: 3 是操作数，直接压入操作数栈。操作数栈：[2, 3] 操作符栈: [+] 轮询 4: - 是操作符，操作符栈中有 + 是平级，将 + 压入操作数栈，- 压入操作符栈。操作数栈：[2, 3, +] 操作符栈: [-] 轮询 5: ( 是界限符，直接压入操作符栈。操作数栈：[2, 3, +] 操作符栈: [-, (] 轮询 6: 2 是操作数，直接压入操作数栈。操作数栈：[2, 3, +, 2] 操作符栈: [-, (] 轮询 7: + 是操作符，操作符栈里往前只有 (, 没有平级或更高级操作符。直接将 + 压入操作符栈中。操作数栈：[2, 3, +, 2] 操作符栈: [-, (, +] 轮询 8: 4 直接加到操作数栈中。操作数栈：[2, 3, +, 2, 4] 操作符栈: [-, (, +] 轮询 9: * 操作符，栈中往前找，没有更高级的，压入操作符栈中。操作数栈：[2, 3, +, 2, 4] 操作符栈: [-, (, +, *] 轮询 10: 2 直接压入操作数栈。操作数栈：[2, 3, +, 2, 4, 2] 操作符栈: [-, (, +, *] 轮询 11: ) 界限符。栈中往前找 (,将中间的操作符压入操作数栈。操作数栈：[2, 3, +, 2, 4, 2, *, +] 操作符栈: [-] 轮询 12: +, 往前有 -, 将 - 加到操作数栈。操作数栈：[2, 3, +, 2, 4, 2, *, +, -] 操作符栈: [+] 轮询 13: 2 直接压入操作数栈。操作数栈：[2, 3, +, 2, 4, 2, *, +, -, 2] 操作符栈: [+] 轮询 14: /,往前没有平级或更高级操作符。操作数栈：[2, 3, +, 2, 4, 2, *, +, -, 2] 操作符栈: [+, /] 轮询 15: 2 压入栈中。操作数栈：[2, 3, +, 2, 4, 2, *, +, -, 2, 2] 操作符栈: [+, /] 退出循环。判断操作符栈。 操作符栈不为空，以此加到操作数栈中。 操作数栈：[2, 3, +, 2, 4, 2, *, +, -, 2, 2, /, +] 操作符栈: [] [2, 3, +, 2, 4, 2, *, +, -, 2, 2, /, +] 即为逆波兰表达式。 里面涉及了一个操作符优先级的比较，我们先写一个方法比较：\n1 2 3 4 5 6 7 8 9 10 11 12 func lowerOP(op1, op2 string) bool { switch op1 { case \u0026#34;+\u0026#34;, \u0026#34;-\u0026#34;: if op2 == \u0026#34;*\u0026#34; || op2 == \u0026#34;/\u0026#34; { return true } case \u0026#34;(\u0026#34;: return true } return false } 该方法名是 lowerOP，返回 true 代表 op1 比 op2 低级，false 代表 op1 比 op2 高级。 op1 代表操作符栈中的数据，op2 代表循环的中缀表达式中的操作符。 如果 op1 是 + 或者 -，那么就比 op2 的 * 或 / 要低级。 如果 op1 是 (, 直接返回 true，因为 ( 是界限符，不参与比较，循环到这里就要停止。 其他情况，都是 op1 比 op2 优先级高。 我们还需要注意一点，上面写的 stack api ，只能接受 int 类型数据，波兰表达式里面是 string 类型数据，需要对 stack 进行微小改造（由读者自行完成）。 所以，根据以上逻辑，我们可以写出中缀表达式转逆波兰表达式的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 func CoverToReversePolishNotation(s string) []string { var opStack, numStack = getStack(), getStack() for i := 0; i \u0026lt; len(s); { isDigit := s[i] \u0026lt;= \u0026#39;9\u0026#39; \u0026amp;\u0026amp; s[i] \u0026gt;= \u0026#39;0\u0026#39; if isDigit { num := int(s[i] - \u0026#39;0\u0026#39;) j := i + 1 for ; j \u0026lt; len(s); j++ { if s[j] \u0026lt;= \u0026#39;9\u0026#39; \u0026amp;\u0026amp; s[j] \u0026gt;= \u0026#39;0\u0026#39; { num = 10*num + int(s[j]-\u0026#39;0\u0026#39;) } else { break } } numStack.push(strconv.Itoa(num)) i = j continue } if !isDigit { op := string(s[i]) switch op { case \u0026#34;(\u0026#34;: opStack.push(op) case \u0026#34;)\u0026#34;: for !opStack.isEmpty() { op := opStack.pop() if op == \u0026#34;(\u0026#34; { break } numStack.push(op) } default: for !opStack.isEmpty() { op1 := opStack.pop() if op1 == \u0026#34;(\u0026#34; || lowerOP(op1, op) { opStack.push(op1) break } numStack.push(op1) } opStack.push(op) } } i++ } for !opStack.isEmpty() { numStack.push(opStack.pop()) } return numStack.Data } 我们可以看到代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 if isDigit { num := int(s[i] - \u0026#39;0\u0026#39;) j := i + 1 for ; j \u0026lt; len(s); j++ { if s[j] \u0026lt;= \u0026#39;9\u0026#39; \u0026amp;\u0026amp; s[j] \u0026gt;= \u0026#39;0\u0026#39; { num = 10*num + int(s[j]-\u0026#39;0\u0026#39;) } else { break } } numStack.push(strconv.Itoa(num)) i = j continue } 这是为了处理有可能多位数字，比如 12、13 等。 如果循环到当前，发现是数字，就另起循环，对下一个数进行探测，如果是数字，就 10*num + int(s[j]-'0’) 如果不是数据，就终止循环，然后将外层循环的指针 i ，指向 j，把数字压入操作数栈中。 核心逻辑代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if !isDigit { op := string(s[i]) switch op { case \u0026#34;(\u0026#34;: opStack.push(op) case \u0026#34;)\u0026#34;: for !opStack.isEmpty() { op := opStack.pop() if op == \u0026#34;(\u0026#34; { break } numStack.push(op) } default: for !opStack.isEmpty() { op1 := opStack.pop() if op1 == \u0026#34;(\u0026#34; || lowerOP(op1, op) { opStack.push(op1) break } numStack.push(op1) } opStack.push(op) } } case ( 和 case ) 都比较简单。 只有 default 里面涉及到了 op1 和 op 的比较。 op1 是操作符栈中取出的数据，op 是循环到当前 s 中的操作符。 如果 op1 比 op 优先级高或平级，那么加入操作数栈中。 我们试着输入：\n输入：2+3-(2+4*2)+2/2 输出：[2 3 + 2 4 2 * + - 2 2 / +] 输出结果和我们之前模拟结果：[2, 3, +, 2, 4, 2, *, +, -, 2, 2, /, +] 是一致的。\n结尾 无论是中缀表达式还是逆波兰表达式，其实都是栈的应用，无非就是中缀表达式转逆波兰表达式的时候，需要注意的点有点多，需要操作的逻辑比较负责，其实核心还是不停使用栈的 pop 和 push 方法，利用栈的后进先出，来实现我们的需要。\n参考资料 https://leetcode-cn.com/problems/8Zf90G/\nhttps://leetcode-cn.com/problems/basic-calculator-ii/\nhttps://leetcode-cn.com/problems/basic-calculator/\n","permalink":"http://wuqiangroy.github.io/post/2022/the_expression/","summary":"之前在字节面试的时候，面试官给我出了一道算法题：给定一个用字符串表示的算式，算式中只有+， -， *， /，请计算出最终结果。 比如 2+3*4-2/2。 很明显，如果没有 * 和 / ，那我们直接一个循环处理即可，但是有了 * 和 /，算式就有了优先级，我们需要先计算优先级高的，在计算优先级低的。 面试官提醒我可以使用栈来处理，我才恍然大悟，然后迅速用代码实现。 面试结束后，我就去细了解了一下这类问题的做法，这种字符串公式的表达叫做：中缀表达式，与之类似的还有前缀表达式和后缀表达式，前缀表达式和后缀表达式又被叫做波兰表达式和逆波兰表达式。\n中缀表达式 其实很多读者在数据结构这一门课上，就已经学过中缀表达式了，但是对于我这个非科班的来说，第一次接触还是非常新鲜的，对于学过的朋友权当复习了。 使用栈这种数据结构，可以很好的处理仅有加减乘除四种运算符（不含括号）的公式。 栈是一种先入后出（FILO）的数据结构，可以将数据入栈和出栈，入栈数据会在栈顶，出栈是将栈顶的数据取出。 对 2+3*4-2/2 表达式来说，我们将数字压入栈，如果遇到 * 和 / 这两个优先级高的操作，我们将栈中的数据出栈，和操作符后面的数据进行 * 和 / 操作之后，将结果入栈，遇到 + 则不做操作，遇到 - 则对后一个数据进行取负，将数据压入栈即可。\n就对 2+3*4-2/2 举例子：\n1 2 3 4 5 6 7 8 9 10 轮询到第一个数字 2 压入栈中，当前栈 [2] 操作符 +， 抛弃 数字 3 压入栈，当前栈：[2, 3] 操作符 *,将栈顶取出一个值 3，当前栈 [2] 将下一个数字 4 和刚刚取出的值 3 做 * 操作得到 12，压入栈，目前栈：[2, 12] 操作符 -, 对下一个数取负 数字 2，取负后压入栈，目前栈 [2, 12, -2] 操作符 /, 取出栈顶值 -2,目前栈 [2, 12] 将下一个数字 2 和刚刚取出的值 -2 做 / 操作得到 1,压入栈，目前栈 [2, 12, -1] 最后对栈里的数据进行相加，得到 2+12-1 = 13 13 即是最终值。 因为 golang 中没有现成的栈 api，我们需要用队列来手动实现一个。 实现代码如下：","title":"从中缀表达式到逆波兰表达式"},{"content":"今年上半年，华为推出了一款智能手表，huawei watch GT3 pro， 我被其精致的外观吸引，于是迫不及待的入手了一款。 虽然我使用的是 iPhone，理应选择同一家的 Apple watch，但是由于 s7 在我老婆那边糟糕的表现（睡眠监控一塌糊涂，每天都需要充电，麦克风时好时坏-已经去 genus bar 更换了一块），我没有选择它。\n首先看看这块表的外观，到现在我都非常喜欢它： 使用起来我也非常的满意，无论是一次充电的使用时长-可以坚持 1-2 周，还是消息的通知延迟上面，亦或者通话接听等，我都觉得其满足我的需求，硬要说不满意，那就是 iPhone 上不能直接回复微信？或者说软件商店里面手表可用软件实在太少，近乎于没有。\n但是对于我来说，一块表的功能就是及时通知和外观，所以上面的缺点我一点都不在乎。 真正让我难以接受的，其实是它的软件：华为运动健康。 如果你直接以华为运动健康作为关键词 google 的话，会出现相当多的软文，都是在吹嘘其好用、运动检测多准之类的，但是却忽略了体验。\n软件莫名其妙的大\n虽然现在手机的容量都是 128G 起，甚至 256G 起，但是这不是软件就能无限制做大的理由，一个运动软件，无论是 OPPO 的运动软件还是 vivo 的运动软件，充其量 100M 出头（OPPO 139M， vivo 104M），但是华为的健康应用，居然有 500M！！！我都不知道它到底在里面塞了些什么！ UI 不精致不简约 现代软件，无论是追求拟物还是扁平化设计，开发者（产品经理？）都对界面的要求相当高的，这点我在各家的健康 app 上面都能看到，但是到了华为这里，很糟糕，你可以说我欣赏能力低下，但是对于我来说，UI 设计糟糕很劝退。 广告极其之多 不知道是不是 huawei 被制裁了还是怎么样，其运动健康软件广告非常多，这也是我最难以忍受的一点。 开屏广告 会员续费通知 主页中间有一个去不掉的饮食日记和健身课程的一个 bar 运动页各种课程推荐 设备页最离谱，这里面塞了一个商城进去！ 反正这个软件让我极其恶心，等哪天受不了了，我应该就会放弃这个表，放弃 huawei 的设备。 最近 Apple 出了个 Apple watch ultra，拥有两天的待机时间，看上去还不错，我再多关注关注。\n题外话：我在诸多论坛、微博看到网友对现在软件公告的吐槽，现在的开屏摇一摇跳转广告、倾斜跳转广告、视频软件的 VIP 专属广告、banner 广告、音乐软件中间夹杂的音频广告……数不胜数。\n我曾看过一个电影，电影名忘记了，大概就是讲未来人做任何事都要看广告，而广告只能用钱跳过。那时候的世界是由广告屏建设的，连家里的墙壁都是，睡觉的时候，看着天花板，然后蹦出广告。吃饭也是需要看广告兑换的。那样的日子，我是难以接受的。\n什么时候厂商能够找到广告和体验的平衡，或者什么时候相关机构强制约束，消费者的体验才能再上一步。\n","permalink":"http://wuqiangroy.github.io/post/2022/debunk_the_health_app_of_huawei/","summary":"今年上半年，华为推出了一款智能手表，huawei watch GT3 pro， 我被其精致的外观吸引，于是迫不及待的入手了一款。 虽然我使用的是 iPhone，理应选择同一家的 Apple watch，但是由于 s7 在我老婆那边糟糕的表现（睡眠监控一塌糊涂，每天都需要充电，麦克风时好时坏-已经去 genus bar 更换了一块），我没有选择它。\n首先看看这块表的外观，到现在我都非常喜欢它： 使用起来我也非常的满意，无论是一次充电的使用时长-可以坚持 1-2 周，还是消息的通知延迟上面，亦或者通话接听等，我都觉得其满足我的需求，硬要说不满意，那就是 iPhone 上不能直接回复微信？或者说软件商店里面手表可用软件实在太少，近乎于没有。\n但是对于我来说，一块表的功能就是及时通知和外观，所以上面的缺点我一点都不在乎。 真正让我难以接受的，其实是它的软件：华为运动健康。 如果你直接以华为运动健康作为关键词 google 的话，会出现相当多的软文，都是在吹嘘其好用、运动检测多准之类的，但是却忽略了体验。\n软件莫名其妙的大\n虽然现在手机的容量都是 128G 起，甚至 256G 起，但是这不是软件就能无限制做大的理由，一个运动软件，无论是 OPPO 的运动软件还是 vivo 的运动软件，充其量 100M 出头（OPPO 139M， vivo 104M），但是华为的健康应用，居然有 500M！！！我都不知道它到底在里面塞了些什么！ UI 不精致不简约 现代软件，无论是追求拟物还是扁平化设计，开发者（产品经理？）都对界面的要求相当高的，这点我在各家的健康 app 上面都能看到，但是到了华为这里，很糟糕，你可以说我欣赏能力低下，但是对于我来说，UI 设计糟糕很劝退。 广告极其之多 不知道是不是 huawei 被制裁了还是怎么样，其运动健康软件广告非常多，这也是我最难以忍受的一点。 开屏广告 会员续费通知 主页中间有一个去不掉的饮食日记和健身课程的一个 bar 运动页各种课程推荐 设备页最离谱，这里面塞了一个商城进去！ 反正这个软件让我极其恶心，等哪天受不了了，我应该就会放弃这个表，放弃 huawei 的设备。 最近 Apple 出了个 Apple watch ultra，拥有两天的待机时间，看上去还不错，我再多关注关注。\n题外话：我在诸多论坛、微博看到网友对现在软件公告的吐槽，现在的开屏摇一摇跳转广告、倾斜跳转广告、视频软件的 VIP 专属广告、banner 广告、音乐软件中间夹杂的音频广告……数不胜数。","title":"吐槽一下华为的运动健康软件"},{"content":"前些年的时候，我在腾讯云上面购买了一个云服务器，一个域名，然后自己用 python 写了一个博客后端。 使用 Nginx 作为正向代理，就这样搭建了我第一个博客。 这个博客内容还挺多，评论、文章、用户系统、富文本编辑框等等，一一俱全。 后来自己对博客的维护比较少，出现了一些 bug 我也难得修复了，等到服务器到期，我就难得续费了。\n后来在网上看到很多博客都非常精美，有的用 wordpress 搭建的，有的用 hugo 搭建的，结合我自己的场景，我决定使用 hugo + github 来创建自己的博客。\n安装 golang hugo 使用 golang 写的，要使用 hugo，需要先安装 golang。安装教程\n安装 hugo macOS 下 hugo 的安装方法：\nbrew instal hugo 其他平台参考官方文档：hugo installation\n创建一个博客 使用 hugo 命令：hugo new site blog 在当前地址创建一个 blog 文件。\n里面的布局如下：\n- archetypes - content - data - layout - public - resource - static - themes config.toml 其中，config.toml 是我们的配置文件，我们主要的修改都在这个配置文件里面。\n使用主题 原生的 hugo 博客并不好看，好在官方及各路大神提供了不少主题，我们直接可以使用，我很喜欢 even 主题，所以我使用 even 来说明。\n按照 even 的文档，首先我们需要下载对应的包：\ngit clone https://github.com/olOwOlo/hugo-theme-even themes/even\n下载完成之后，我们可以看到 themes 里面多出来一个 even 的文件夹。\n在 exampleSite 里面，我们将 config.toml 里面的内容复制，然后将 blog 文件夹下的 config.toml 内容替换。\nPS. 替换完成的 config.toml 里面有不少需要更改的地方，包括 title 等，需要自行进行更改。\n创建 about 我们通过 hugo new about.md\n然后我们可以在 content 里面看到 about.md 文件， 内容如下：\n--- title: \u0026#34;About\u0026#34; date: 2022-11-27T17:08:11+08:00 draft: true --- 可以在后面继续添加你的说明，文档格式是 markdown。\n创建第一篇博客 我们通过 hugo new post/blog_name.md 创建一篇名为 blog_name 的博客。\n你可以在 content/post 里面看到该文件。\n文件内容如下：\n--- title: \u0026#34;blog_name\u0026#34; date: 2022-11-27T17:08:11+08:00 draft: true --- 然后你可以在后面继续编写。\nPS. 博客和 about 里面的 draft 为 true 的话，文章在博客里面是不会显示的，只有设置成 false 才会显示。\n添加额外信息 我们有时候会给文章添加 tags、category 还有 author 的信息，我们只需要在两个 --- 之间添加即可。\n格式如下：\n--- title: \u0026#34;blog_name\u0026#34; date: 2022-11-27T17:08:11+08:00 draft: true tags: [\u0026#34;教程\u0026#34;, \u0026#34;hugo\u0026#34;] categories: [\u0026#34;教程\u0026#34;] author: \u0026#34;your_name\u0026#34; --- 博客预览 我们可以通过 hugo server 来启动本地开发环境。你可以通过 127.0.0.1:1313 来进访问。\n生产博客 通过博客预览，我们检查无误之后，可以使用命令：hugo 来生成生产环境的博客。\n生成内容在 pulic 文件夹里面。\n创建 gihub repo 要使用 github 来管理和访问我们的博客，我们需要在 github 创建一个项目： your_account_name.github.io 其中 your_account_name 是你在 github 上面的账户名，仓库名格式固定，像博主的 github 名是 wuqiangroy，所以我的 repo 名是：wuqiangroy.github.io。\n推送数据 我们进入 public 文件夹：cd public 然后通过以下命令推送项目：\ngit init git remote add origin git@github.com:your_account_name/your_account_name.github.io.git git add --all git commit -m \u0026#34;update my first blog\u0026#34; git push origin master 然后我们静待一会，就能通过 your_account_name.github.io 来进行博客访问了。\n本文默认读者对于 git 是使用时没有问题的，如果对于 git 使用不熟悉，请参考：https://www.runoob.com/git/git-tutorial.html 本文默认读者对于 github 的简单使用是没有问题，并且有自己的账号，如有相关问题，请参考：https://docs.github.com/en/get-started\n","permalink":"http://wuqiangroy.github.io/post/2022/build_blog_by_hugo/","summary":"前些年的时候，我在腾讯云上面购买了一个云服务器，一个域名，然后自己用 python 写了一个博客后端。 使用 Nginx 作为正向代理，就这样搭建了我第一个博客。 这个博客内容还挺多，评论、文章、用户系统、富文本编辑框等等，一一俱全。 后来自己对博客的维护比较少，出现了一些 bug 我也难得修复了，等到服务器到期，我就难得续费了。\n后来在网上看到很多博客都非常精美，有的用 wordpress 搭建的，有的用 hugo 搭建的，结合我自己的场景，我决定使用 hugo + github 来创建自己的博客。\n安装 golang hugo 使用 golang 写的，要使用 hugo，需要先安装 golang。安装教程\n安装 hugo macOS 下 hugo 的安装方法：\nbrew instal hugo 其他平台参考官方文档：hugo installation\n创建一个博客 使用 hugo 命令：hugo new site blog 在当前地址创建一个 blog 文件。\n里面的布局如下：\n- archetypes - content - data - layout - public - resource - static - themes config.toml 其中，config.toml 是我们的配置文件，我们主要的修改都在这个配置文件里面。\n使用主题 原生的 hugo 博客并不好看，好在官方及各路大神提供了不少主题，我们直接可以使用，我很喜欢 even 主题，所以我使用 even 来说明。","title":"使用 Hugo 搭建自己的博客"},{"content":"受够了各种网络信息流的推荐，为了避免信息茧房的产生，我决定放弃一些社交网站，重拾回 RSS.\n软件分享 由于我的工具都是 Apple 家的，所以我的订阅软件都是在 macOS 和 iOS 下的。\n这两个平台的阅读软件，没有其他，最好的只有 reeder。\nreeder 在 macOS 上好解决一些，无论是安装盗版还是直接在 App Store 购买，都非常方便。\n在 iOS 上面比较复杂，由于该软件在国区下架了，所以需要去外区下载，建议先 google 如何创建外区账号，创建外区账号之后，再到淘宝购买兑换码。\n其他的软件比如 unread 和 inoreader，我都是不太推荐的，无论是软件体积、软件流畅度还是交互逻辑，reeder 都秒杀他们。\n更重要的，只要你的订阅数据同步到 iCloud，那么你在 macOS 和 iOS 上的阅读进度和订阅数据都将同步，方便你在两个平台无感切换。\n订阅源 其实 RSS 也是一种信息茧房，因为各种订阅源都是你自己选择了的嘛，所以你也是活在自己想看到的世界里。\n为了避免这种情况的产生，我也硬着头皮订阅了一些观点我不太认可的信息源，但是不可否认的是，兼听则明。大家的思维已经在十来岁时固定，现在的一些信息要是能改变一个人的思维，只能证明这个人要么思维过于简单，要么太过幼稚。\n下面是一些我推荐的订阅源，我会附以简单的说明，但是不会输出我个人的观点。\n我知道有个项目叫做 rsshub，这里面的订阅源很全，读者朋友也可以直接到这里面进行查找自己喜欢的数据订阅。\n但是对于我来说，由于这个地址被墙了，我又不愿意在手机上常开 VPN，所以我就拒绝这里面的订阅，寻找了其他的订阅源。\n我订阅数据的原则有：\n官方网站能提供的订阅，优先官方 不能订阅原文或通过 reeder 无法查看全文的数据不订阅。 不订阅反党反共的私人博客。 序号 名称 订阅地址 订阅说明 1 9to5Mac https://plink.anyfeeder.com/9to5mac Apple 相关的一些新闻 2 BBC 英语教学 https://plink.anyfeeder.com/bbc/learningenglish BBC 学习英语相关的订阅 3 FindBlog https://rss.huhexian.cn/i/?a=rss\u0026amp;rid=63837d83e772a\u0026amp;hours=168 一个 blog 的聚合网站，订阅了该数据源，可以少订阅很多个人博客 4 IT 之家 https://www.ithome.com/rss it 之家，看 it 信息的首选网站 5 Linux 中国 https://www.linux.cn/rss.xml 分享 linux 相关信息和一些使用技巧，软件 6 The Verge https://www.theverge.com/rss/index.xml 国外知名 it 信息网站 7 南华早报 https://www.feedx.fun/rss/scmp.xml 香港最知名英文报纸，国内被墙，可以翻墙的朋友可以直接订阅源站：https://www.scmp.com/rss/91/feed 8 好工具周刊 https://discuss-cn.bestxtools.com/atom/t/weekly/discussions v2ex 网友自荐的订阅 9 少数派 https://www.sspai.com/feed 知名数码网站少数派，不过不推送全文，需开启 reeder 的阅读全文 10 搜狐新闻 http://rss.news.sohu.com/rss/focus.xml 几大互联网新闻平台依旧还提供 RSS 订阅的新闻网站 11 极客公园 https://www.geekpark.net/rss 知名互联网新闻网站 12 爱范儿 https://www.ifanr.com/feed 聚焦新创和消费主题的科技媒体 13 知乎每日精选 https://www.zhihu.com/rss 知乎难得的一个 RSS 订阅 14 知乎热榜 https://plink.anyfeeder.com/zhihu/hotlist 第三方提供的知乎热榜订阅 15 纽约时报 https://plink.anyfeeder.com/nytimes/dual 纽约时报-双语版 16 虎嗅 https://rss.huxiu.com 推送的大都是各类公众号文章 17 观察者网 https://api.feeddd.org/feeds/613381f81269c358aa0eaae1 观察者网的公众号 18 钛媒体 https://www.tmtpost.com/rss 优秀的财经科技信息服务平台 推荐一个可以订阅微信公众号的网站：https://feeddd.org/feeds\n","permalink":"http://wuqiangroy.github.io/post/2022/my_rss/","summary":"受够了各种网络信息流的推荐，为了避免信息茧房的产生，我决定放弃一些社交网站，重拾回 RSS.\n软件分享 由于我的工具都是 Apple 家的，所以我的订阅软件都是在 macOS 和 iOS 下的。\n这两个平台的阅读软件，没有其他，最好的只有 reeder。\nreeder 在 macOS 上好解决一些，无论是安装盗版还是直接在 App Store 购买，都非常方便。\n在 iOS 上面比较复杂，由于该软件在国区下架了，所以需要去外区下载，建议先 google 如何创建外区账号，创建外区账号之后，再到淘宝购买兑换码。\n其他的软件比如 unread 和 inoreader，我都是不太推荐的，无论是软件体积、软件流畅度还是交互逻辑，reeder 都秒杀他们。\n更重要的，只要你的订阅数据同步到 iCloud，那么你在 macOS 和 iOS 上的阅读进度和订阅数据都将同步，方便你在两个平台无感切换。\n订阅源 其实 RSS 也是一种信息茧房，因为各种订阅源都是你自己选择了的嘛，所以你也是活在自己想看到的世界里。\n为了避免这种情况的产生，我也硬着头皮订阅了一些观点我不太认可的信息源，但是不可否认的是，兼听则明。大家的思维已经在十来岁时固定，现在的一些信息要是能改变一个人的思维，只能证明这个人要么思维过于简单，要么太过幼稚。\n下面是一些我推荐的订阅源，我会附以简单的说明，但是不会输出我个人的观点。\n我知道有个项目叫做 rsshub，这里面的订阅源很全，读者朋友也可以直接到这里面进行查找自己喜欢的数据订阅。\n但是对于我来说，由于这个地址被墙了，我又不愿意在手机上常开 VPN，所以我就拒绝这里面的订阅，寻找了其他的订阅源。\n我订阅数据的原则有：\n官方网站能提供的订阅，优先官方 不能订阅原文或通过 reeder 无法查看全文的数据不订阅。 不订阅反党反共的私人博客。 序号 名称 订阅地址 订阅说明 1 9to5Mac https://plink.anyfeeder.com/9to5mac Apple 相关的一些新闻 2 BBC 英语教学 https://plink.anyfeeder.com/bbc/learningenglish BBC 学习英语相关的订阅 3 FindBlog https://rss.huhexian.cn/i/?a=rss\u0026amp;rid=63837d83e772a\u0026amp;hours=168 一个 blog 的聚合网站，订阅了该数据源，可以少订阅很多个人博客 4 IT 之家 https://www.","title":"我的 RSS 资源"},{"content":"今年五月份的时候，许久不见的兄弟在群里发了一张称体重的照片，70kg。\n我震惊了，作为体重长期在 80kg 徘徊的哥们，瘦了！！！\n我难以置信。\n我从大学一毕业，体重就从 130 哐哐哐的往上涨，一直到巅峰时期 160 斤。去年体检的时候，重度脂肪肝、肥胖、甘油酸酯偏高、尿酸偏高各种症状一一俱全，那时候调侃自己：几百块钱，别人几项，我十几项，划算啊！\n兄弟这个 70kg，彻底刺激了我，也激发了我减肥的欲望。\n从大学毕业到现在，也有了 6 年时光。\n本来就只有 170cm 的我，挺个大肚子，脸上肥肥的，照镜子里面我都难以接受我自己。\n6 年来，期间也进行了无数次的减肥，但都没有坚持下去，没次减个几斤，就因为各种原因放弃，然后体重不仅涨回去，还超过之前的巅峰，160 斤也就这么慢慢吃出来了。\n这次下定恒心要减下去，一来是有了个目标在前面，二来我觉得我也应该做出改变，免得之后参加家长会，被笑话，我可不愿意成为我女儿的爸爸是同学之间的笑柄。\n我知道减肥最简单的方式就是：摄入 \u0026lt; 摄出。\n由于当前我的体重过大，不能参加跑步等有氧运动（大体重跑步对膝盖伤害实在太大了），所以跑步是不行了。幸亏我自己游泳还不错，游泳纳入了我的运动计划。 同时我还购入了 switch（我真不是为了玩游戏）和健身环，备受好评的健身环，希望能为我减肥助力。\n同时我还制定了严格的饮食方案。\n饮食方案 看了多个抖音减肥博主的理论，大多都是减肥 3 分靠动，7 分靠吃。 所以我严格控制了我的饮食，我和兄弟勾兑了一下他的减肥方案，很简单：\n早上、中午随意吃，晚上两根玉米，一个鸡蛋，或者晚上两个鸡蛋，一根玉米 于是我参考了他的方案，不过我加以了修改，做出了一下决定：\n早餐：鸡蛋、牛奶、半个馒头（约 50g） 午餐：公司食堂，米饭是之前的一半 晚餐：一根玉米和一个鸡蛋、两个黄瓜、一个红薯 严格遵守以上饮食计划的同时，戒掉饮料、戒掉零食、戒掉糕点。 然后每周一次游泳池游泳，每次约 2km，消耗卡路里约：700 大卡。 这样我坚持了两个月，成功将体重降到了 72.5kg 两个月，瘦了 15 斤，平均每个月瘦 7 斤，我相当满意。 这时候，我发现我只靠饮食已经瘦不下去，我需要一定量的运动进行辅助，现在体重降下来了，我觉得我可以进行跑步了。\n有氧运动 我将跑步纳入我的减肥计划的时候，晚餐也逐渐恢复了。 由于两个多月以来的少量饮食，我的胃已经成功缩小了，这时候我觉得晚餐我不能一直黄瓜玉米，于是我渐渐的恢复了正常饮食，米饭一般 150-200g，菜的话正常家常菜，没有特意的多吃蔬菜或少吃肉类。\n不得不说，跑步真的是一件非常痛快的事，前 3km，不停的思考为啥我要选择如此自虐的运动，后面的路程就是一路的畅快，跑完步了，简直比高潮还要爽。\n跑步期间，我思考了很多事情，包括我未来的职业规划，以及我的工作计划等等。\n除了刚开始跑需要更多耐心来提升耐心和跑步伤膝盖之外，跑步真的是一件完美的运动。\n9 月成都因为疫情，封城了几天，这几天，我基本上个一天跑一个 10km。\n于是，到 11 月份，我这几个月的跑步情况如下：\n7 月：41.33km 8 月：77.7km 9 月：100.34km 10 月：43.5km 11 月：26.5km 9 月到达了我的跑步巅峰，当月突破了 100km，当然这也是因为封城导致我没有去游泳，所以将精力多给了跑步的原因。\n10 月份的时候，我的体重已经到达了 64.5kg，这也是 10 年来我最瘦的时刻，但是这时候我注意到我虽然减肥初有成效，但是体型不好看，我需要无氧运动来塑造我的身材。\n无氧运动 无氧运动，主要就是撸铁，我从床底下翻出来 8 年没用的哑铃，然后设置了单个 8kg 的重量。 无氧运动主要是为了锻炼相关的肌肉，所以我将饮食做了些许的调整：\n早餐将鸡蛋变更为 2 个。 午餐将瘦肉类比例增大 晚餐米饭恢复正常，肉类比例增大。 无氧运动我按照一下方式训练：\n划船单手 40 个，每天 4 - 5 组 负重下蹲 20 个一组，每天 4 -5 组 推胸每组 30 个，每天 4 - 5 组。 经过一个半月，我发现我的胸和手臂线条明显好看了很多。而且饮食恢复也没有让我再长胖。\n总结 从 5 月份开始减肥到现在，经过了半年多的时间，我的体重从 160 斤成功减到了 125 斤。\n整个减肥过程，还真是应了那句老话：少吃多动\n上个月体检，我的重度脂肪肝、尿酸、血等诸多问题，全部都已经恢复正常，现在的我感觉整个人无论是精气神还是身材都已经抵达了我的巅峰。\n至于肥胖的时刻，现在真的难以想象那种日子。\n对了，负重下蹲有利于那方面能力的提升哦～\n祝所以肥胖的朋友或正在减肥挣扎的朋友，早日恢复到正常体重！享受不一样的人生。\nPS. 关于 switch 健身环是否有用：我之前逛 SMZDM 的时候，就有很有朋友问健身环是否拥有，我这里可以做一个说明，其实初期我玩它的时候，主要是因为我没法进行跑步，同时也没法天天去游泳（连续游两次消毒水的味道就能让人呕吐），所以健身环补足了我的运动。但是中后期我开始跑步撸铁之后，switch 就吃灰了。\n","permalink":"http://wuqiangroy.github.io/post/2022/my_exp_of_losing_weight/","summary":"今年五月份的时候，许久不见的兄弟在群里发了一张称体重的照片，70kg。\n我震惊了，作为体重长期在 80kg 徘徊的哥们，瘦了！！！\n我难以置信。\n我从大学一毕业，体重就从 130 哐哐哐的往上涨，一直到巅峰时期 160 斤。去年体检的时候，重度脂肪肝、肥胖、甘油酸酯偏高、尿酸偏高各种症状一一俱全，那时候调侃自己：几百块钱，别人几项，我十几项，划算啊！\n兄弟这个 70kg，彻底刺激了我，也激发了我减肥的欲望。\n从大学毕业到现在，也有了 6 年时光。\n本来就只有 170cm 的我，挺个大肚子，脸上肥肥的，照镜子里面我都难以接受我自己。\n6 年来，期间也进行了无数次的减肥，但都没有坚持下去，没次减个几斤，就因为各种原因放弃，然后体重不仅涨回去，还超过之前的巅峰，160 斤也就这么慢慢吃出来了。\n这次下定恒心要减下去，一来是有了个目标在前面，二来我觉得我也应该做出改变，免得之后参加家长会，被笑话，我可不愿意成为我女儿的爸爸是同学之间的笑柄。\n我知道减肥最简单的方式就是：摄入 \u0026lt; 摄出。\n由于当前我的体重过大，不能参加跑步等有氧运动（大体重跑步对膝盖伤害实在太大了），所以跑步是不行了。幸亏我自己游泳还不错，游泳纳入了我的运动计划。 同时我还购入了 switch（我真不是为了玩游戏）和健身环，备受好评的健身环，希望能为我减肥助力。\n同时我还制定了严格的饮食方案。\n饮食方案 看了多个抖音减肥博主的理论，大多都是减肥 3 分靠动，7 分靠吃。 所以我严格控制了我的饮食，我和兄弟勾兑了一下他的减肥方案，很简单：\n早上、中午随意吃，晚上两根玉米，一个鸡蛋，或者晚上两个鸡蛋，一根玉米 于是我参考了他的方案，不过我加以了修改，做出了一下决定：\n早餐：鸡蛋、牛奶、半个馒头（约 50g） 午餐：公司食堂，米饭是之前的一半 晚餐：一根玉米和一个鸡蛋、两个黄瓜、一个红薯 严格遵守以上饮食计划的同时，戒掉饮料、戒掉零食、戒掉糕点。 然后每周一次游泳池游泳，每次约 2km，消耗卡路里约：700 大卡。 这样我坚持了两个月，成功将体重降到了 72.5kg 两个月，瘦了 15 斤，平均每个月瘦 7 斤，我相当满意。 这时候，我发现我只靠饮食已经瘦不下去，我需要一定量的运动进行辅助，现在体重降下来了，我觉得我可以进行跑步了。\n有氧运动 我将跑步纳入我的减肥计划的时候，晚餐也逐渐恢复了。 由于两个多月以来的少量饮食，我的胃已经成功缩小了，这时候我觉得晚餐我不能一直黄瓜玉米，于是我渐渐的恢复了正常饮食，米饭一般 150-200g，菜的话正常家常菜，没有特意的多吃蔬菜或少吃肉类。\n不得不说，跑步真的是一件非常痛快的事，前 3km，不停的思考为啥我要选择如此自虐的运动，后面的路程就是一路的畅快，跑完步了，简直比高潮还要爽。\n跑步期间，我思考了很多事情，包括我未来的职业规划，以及我的工作计划等等。\n除了刚开始跑需要更多耐心来提升耐心和跑步伤膝盖之外，跑步真的是一件完美的运动。\n9 月成都因为疫情，封城了几天，这几天，我基本上个一天跑一个 10km。\n于是，到 11 月份，我这几个月的跑步情况如下：\n7 月：41.33km 8 月：77.","title":"我的减肥之路"}]